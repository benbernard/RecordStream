=head1 NAME

recs-annotate

=head1 recs-annotate --help-all

 Help from: --help-basic:
 Usage: recs-annotate <args> <expr> [<files>]
    <expr> is evaluated as perl on each record of input (or records from <files>)
    with $r set to a App::RecordStream::Record object and $line set to the
    current line number (starting at 1). Records are analyzed for changes, those
    changes are applied to each successive record that matches --keys
 
    Only use this script if you have --keys fields that are repeated, otherwise
    recs-xform will be faster
 
 IMPORTANT SNIPPET NOTE
    Because of the way annotations are recorded, you cannot use UNSHIFT or
    SPLICE on array refs that already exist in the record you are modifiying.
    Additionally, deletes, removes, unshifts, and other 'removing' operations
    will not apply to later records. If you need this behavior, consider using
    recs-xform
 
    --e                          a perl snippet to execute, optional
    --E                          the name of a file to read as a perl snippet
    --M module[=...]             execute "use module..." before executing
                                 snippet; same behaviour as perl -M
    --m module[=...]             same as -M, but by default import nothing
    --keys                       Keys to match records by, maybe specified
                                 multiple times, may be a keygroup or keyspec
    --filename-key|fk <keyspec>  Add a key with the source filename (if no
                                 filename is applicable will put NONE)
 
   Help Options:
       --help-all        Output all help for this script
       --help            This help screen
       --help-keygroups  Help on keygroups, a way of specifying multiple keys
       --help-keys       Help on keygroups and keyspecs
       --help-keyspecs   Help on keyspecs, a way to index deeply and with regexes
       --help-snippet    Help on code snippets
 
 Examples:
    # Annotate records with IPs with hostnames, only doing lookup once
    ... | recs-annotate --key ip '{{hostname}} = `host {{ip}}`'
 
    # Record md5sums of files
    ... | recs-annotate --key filename '{{md5}} = `md5sum {{filename}}`'
 
    # Add url contents to records
    ... | recs-annotate --key url '{{contents}} = `curl {{url}}`'
 
 Help from: --help-keygroups:
 KEY GROUPS
    SYNTAX: !regex!opt1!opt2... Key groups are a way of specifying multiple
    fields to a recs command with a single argument or function. They are
    generally regexes, and have several options to control what fields they
    match. By default you give a regex, and it will be matched against all first
    level keys of a record to come up with the record list. For instance, in a
    record like this:
 
    { 'zip': 1, 'zap': 2, 'foo': { 'bar': 3 } }
 
    Key group: !z! would get the keys 'zip' and 'zap'
 
    You can have a literal '!' in your regex, just escape it with a \.
 
    Normally, key groups will only match keys whose values are scalars. This can
    be changed with the 'returnrefs' or rr flag.
 
    With the above record !f! would match no fields, but !f!rr would match foo
    (which has a value of a hash ref)
 
    Options on KeyGroups:
       returnrefs, rr  - Return keys that have reference values (default:off)
       full, f         - Regex should match against full keys (recurse fully)
       depth=NUM,d=NUM - Only match keys at NUM depth (regex will match against
                         full keyspec)
       sort, s         - sort keyspecs lexically
 
 Help from: --help-keyspecs:
   KEY SPECS
    A key spec is short way of specifying a field with prefixes or regular
    expressions, it may also be nested into hashes and arrays. Use a '/' to nest
    into a hash and a '#NUM' to index into an array (i.e. #2)
 
    An example is in order, take a record like this:
 
      {"biz":["a","b","c"],"foo":{"bar 1":1},"zap":"blah1"}
      {"biz":["a","b","c"],"foo":{"bar 1":2},"zap":"blah2"}
      {"biz":["a","b","c"],"foo":{"bar 1":3},"zap":"blah3"}
 
    In this case a key spec of 'foo/bar 1' would have the values 1,2, and 3 in
    the respective records.
 
    Similarly, 'biz/#0' would have the value of 'a' for all 3 records
 
    You can also prefix key specs with '@' to engage the fuzzy matching logic
 
    Fuzzy matching works like this in order, first key to match wins
      1. Exact match ( eq )
      2. Prefix match ( m/^/ )
      3. Match anywehre in the key (m//)
 
    So, in the above example '@b/#2', the 'b' portion would expand to 'biz' and 2
    would be the index into the array, so all records would have the value of 'c'
 
    Simiarly, @f/b would have values 1, 2, and 3
 
    You can escape / with a \. For example, if you have a record:
    {"foo/bar":2}
 
    You can address that key with foo\/bar
 
 Help from: --help-snippet:
    CODE SNIPPETS:
     Recs code snippets are perl code, with one exception. There a couple of
     variables predefined for you, and one piece of special syntax to assist in
     modifying hashes.
 
 Special Variables:
     $r - the current record object. This may be used exactly like a hash, or you
     can use some of the special record functions, see App::RecordStream::Record
     for more information
 
     $line - This is the number of records run through the code snippet, starting
     at 1. For most scripts this corresponds to the line number of the input to
     the script.
 
     $filename - The filename of the originating record. Note: This is only
     useful if you're passing filenames directly to the recs script, piping
     from other recs scripts or from cat, for instance, will not have a
     useful filename.
 
 Special Syntax
     Use {{search_string}} to look for a string in the keys of a record, use /
     to nest keys. You can nest into arrays by using an index. If you are
     vivifying arrays (if the array doesn't exist, prefix your key with # so
     that an array rather than a hash will be created to put a / in your key,
     escape it twice, i.e. \/
 
     This is exactly the same as a key spec that is always prefaced with a @, see
     'man recs' for more info on key specs
 
     For example: A record that looks like:
     { "foo" : { "bar 1" : 1 }, "zoo" : 2}
     Could be accessed like this:
 
     # value of zoo  # value of $r->{foo}->{bar 1}: (comma separate nested keys)
     {{zoo}}         {{foo/ar 1}}
 
     # Even assign to values (set the foo key to the value 1)
     {{foo}} = 1
 
     # And auto, vivify
     {{new_key/array_key/#0}} = 3 # creates an array within a hash within a hash
 
     # Index into an array
     {{array_key/#3}} # The value of index 3 of the array ref under the
     'array_key' hash key.
 
     This matching is a fuzzy keyspec matching, see --help-keyspecs for
     more details.
 

=head1 SEE ALSO

=over

=item * See L<App::RecordStream> for an overview of the scripts and the system

=item * Run C<recs examples> or see L<App::RecordStream::Manual::Examples> for a set of simple recs examples

=item * Run C<recs story> or see L<App::RecordStream::Manual::Story> for a humorous introduction to RecordStream

=item * Every command has a C<--help> mode available to print out usage and
examples for the particular command, just like the output above.

=back

